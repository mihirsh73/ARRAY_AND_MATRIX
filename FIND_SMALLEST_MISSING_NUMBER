OPTIMAL SOLUTION
1- separate negative and positive numbers
2- find in positive part  let say if positive part size is 4 so it should contain values 1-4 
int find_missing(int arr[], int n)
    {
        for(int i=0; i<n; i++)
        {
            if(abs(arr[i])-1<n && arr[abs(arr[i])-1]>0)         first conditon check whether arr[i]-1 should lies under the size of array ex 1,3,2 array size is 3 so all the lies under size of array               
            {                                                    second condition if at that index value is positive then market visited by making negative
                arr[abs(arr[i])-1]=-arr[abs(arr[i])-1];
            }
        }
        int i;
        for(i=0; i<n; i++)                 ex 1,4 2 after above condition -1,-4,2 here 2 stay positive because 4 is out of index 
        {
            if(arr[i]>0)
            {
                return i+1;
            }
        }
        return n+1;
    }
    int aggregate(int arr[], int n)
    {
        int i=0;
        int j=0;
        while(i<n)
        {
            if(arr[i]<=0)
            {
                swap(arr[i],arr[j]);
                j++;
            }
            i++;
        }
       return j;
    }
    int missingNumber(int arr[], int n) 
    { 
        // brute force O(n*2)
        // unordered_map<int,int> mp;
        // int res=1;
        // for(int i=0; i<n; i++)
        // {                                      // BETTER SOLUTION TC O(N) SC O(N)
        //     mp[arr[i]]++;
        // }
        // for(auto x: mp)
        // {
        //     if(mp.find(res)==mp.end())
        //     {
        //         return res;
        //     }
        //     else{
        //         res++;
        //     }
        // }
        // return res;
        int index=aggregate(arr,n);
        return find_missing(arr+index,n-index);
